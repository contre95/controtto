name: Tag, Release, and Build
on:
  pull_request:
    branches:
      - main
    types: [closed]
#
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  actions: write

jobs:
  tag-and-release:
    if: github.event.pull_request.merged == true && (startsWith(github.event.pull_request.head.ref, 'fix/') || startsWith(github.event.pull_request.head.ref, 'feature/') || startsWith(github.event.pull_request.head.ref, 'release/' || startsWith(github.event.pull_request.head.ref, 'dev/')))
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.set_tag.outputs.tag_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Get the latest tag
        id: get_tag
        run: |
          git fetch --tags
          latest_tag=$(git describe --tags --match "v*.*.*" --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $latest_tag"
          echo "tag=$latest_tag" >> $GITHUB_ENV
      - name: Determine new version
        id: determine_version
        run: |
          version=${tag#v}
          IFS='.' read -r major minor patch <<< "$version"

          if [[ "${{ github.event.pull_request.head.ref }}" == fix/* ]]; then
            patch=$((patch + 1))
          elif [[ "${{ github.event.pull_request.head.ref }}" == feature/* || "${{ github.event.pull_request.head.ref }}" == dev/* ]]; then
            minor=$((minor + 1))
            patch=0
          elif [[ "${{ github.event.pull_request.head.ref }}" == release/* ]]; then
            major=$((major + 1))
            minor=0
            patch=0
          fi

          new_version="v${major}.${minor}.${patch}"
          echo "New version: $new_version"
          echo "new_version=$new_version" >> $GITHUB_ENV
      - name: Create Git tag
        run: |
          git tag ${{ env.new_version }}
          git push origin ${{ env.new_version }}
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.new_version }}
          release_name: Release ${{ env.new_version }}
          draft: false
          prerelease: false
          body_path: CHANGELOG.md
      - name: Output tag name
        id: set_tag
        run: |
          echo "tag_name=${{ env.new_version }}" >> $GITHUB_OUTPUT
  build-and-push:
    needs: tag-and-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code at tag
        uses: actions/checkout@v2
        with:
          ref: ${{ needs.tag-and-release.outputs.tag_name }}
          fetch-depth: 0
      - name: Set up Podman
        run: |
          sudo apt-get update
          sudo apt-get install -y podman
      - name: Login to DockerHub
        run: |
          podman login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }} docker.io
      - name: Build and push Container image
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          version=${{ needs.tag-and-release.outputs.tag_name }}
          podman image build --build-arg IMAGE_TAG=$version -t contre95/controtto:$version .
          podman push contre95/controtto:$version

          # Tag and push the :beta tag
          podman image build --no-cache --build-arg IMAGE_TAG=beta-$version -t contre95/controtto:beta .
          podman push contre95/controtto:beta

          if [[ "${{ github.event.pull_request.head.ref }}" == release/* ]]; then
            # Tag and push the :latest tag
            podman tag contre95/controtto:$version contre95/expense-mate:latest
            podman push contre95/controtto:latest
          fi
